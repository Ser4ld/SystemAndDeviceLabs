System and Device Programming
Laboratory number 04 (System and Programming part)

Learning goals
--------------
Lambda Expressions, RAII and Smart Pointers, Copy control, Multi/threading and synchronization.


Exercise 01
Lambda Expressions
------------------

Suppose you run the following program. State what the output is.

#include <functional>
#include <iostream>
#include <vector>

using namespace std;
using std::cout;
using std::endl;

auto l1 (int& x) {
  return [&] { std::cout << x << '\n'; };
}

int main() {
  {
    std::string str = "opeNai";

    std::sort(str.begin(), str.end(), [](char a, char b) {
        return std::tolower(a) < std::tolower(b);
    });

    std::cout << "L1: " << str << std::endl;
  }

  {
    int arr[] = {5, 2, 8, 1, 9, 3};

    int size = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + size, [](int a, int b) {
        return a > b;
    });

    std::cout << "L2: ";
    for (int i = 0; i < size; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
  }

  {
    int i = 3;
    auto f = l1(i);
    i = 5;
    cout << "L3: ";
    f();
  }

  {
    std::vector<int> c{1, 2, 3, 4, 5, 6, 7};
    int x = 5;
    c.erase(std::remove_if(c.begin(), c.end(), [x](int n) { return n < x; }), c.end());
 
    std::cout << "L4: ";
    std::for_each(c.begin(), c.end(), [](int i) { std::cout << i << ' '; });
    std::cout << '\n';
  }

  {
    // Lambda with recursion
    const int val = 10;
    
    auto l_fib = [](int n)
    {
        std::function<int(int, int, int)> fib = [&](int n, int a, int b)
        {
            return n ? fib(n - 1, a + b, a) : b;
        };
        return fib(n, 0, 1);
    };

    cout << "L5: ";
    for (int i{1}; i <= val; ++i)
        std::cout << l_fib(i) << (i < val ? ", " : "\n");
  }
  
  return 0;
}



Exercise 02
RAII and Smart Pointers
-----------------------

Reply to the following questions:
01. What is dynamic memory allocation in C++?
02. Explain the difference between stack memory and heap memory.
03. What is the new operator in C++, and how does it relate to dynamic
    memory allocation?
04. What is the purpose of the delete operator in C++?
05. What are memory leaks, and how can dynamic memory allocation
    contribute to them?
06. What are smart pointers in C++, and why are they used?
07. Describe the differences between std::unique_ptr, std::shared_ptr,
    and std::weak_ptr.
08. How do smart pointers help prevent memory leaks and other
    memory-related issues?
09. What is the role of the destructor in smart pointers?
10. Explain the concept of ownership semantics in the context of smart
    pointers.
11. Discuss the potential pitfalls of using raw pointers in C++ and
    how smart pointers address these issues.
12. Discuss the potential overhead associated with using smart
    pointers compared to raw pointers and strategies for minimizing it.




Exercise 03
Copy control
------------

Suppose you run the following program.
Which ones, when, and how many of the following copy control functions
- constructor
- copy constructor
- copy assignment operator
- move constructor
- move assignment operator
- destructor
are called?

#include <functional>
#include <iostream>
#include <vector>

using std::cout;
using std::endl;

class C {
private:
    int i;
public:
    C () {
        cout << "[C]";
    }
    ~C() {
        cout << "[D]";
    }
    C (const C &n) {
        cout << "[CC]";
    }
    C &operator=(const C &n) {
        cout << "[CAO]";
        return *this;
    }
    C (C&& n) noexcept {
        cout << "[MC]";
    }
    C &operator=(C&&n) noexcept {
        cout << "[MAO]";
        return *this;
    }
    void set(int n)  {
        i = n;
    };
    int get () {
        return i;
    }
};

void swap (C &e1, C &e2) {
  C tmp;
  tmp=e1;
  e1=e2;
  e2=tmp;
  return;
}

int main() {
  cout << endl << "{01}"; C e1;
  cout << endl << "{02}"; C e2[5];
  cout << endl << "{03}"; C e3 = *new (std::nothrow) C;
  cout << endl << "{04}"; C *e4 = new C;
  cout << endl << "{05}"; C *e5 = new C[10];  
  
  cout << endl << "{06}"; C v1 = e1;
  cout << endl << "{07}"; C v2 = (std::move(e1));
  cout << endl << "{08}"; C v3;
  cout << endl << "{09}"; v3 = (std::move(e1));

  cout << endl << "{10}"; swap (e1, v3);

  cout << endl << "{11}"; return 0;
}


Exercise 04 (Version A and B)
Concurrent file sorting and merging
-----------------------------------

A file stores integer values in binary format on 32 bits.
The first integer stored in the file indicates the number of values
following the first one.
For example, the following three lines specify (obviously in ASCII
format, to be user-readable) the content of three possible files
(that are stored in, or must be converted into binary format):

File 1: 5 23 45 67 9 23
File 2: 12 90 65 34 24 12 0 89 29 54 12 78 3
File 3: 3 9 5 1

Write an application that:

- Receives a variable number of strings, let us say n strings, on the
  command line.
  The first (n-1) strings are input file names.
  The last string is an output file name.
  Each input file has the format previously described.

- Runs one thread for each input file, passing to each of them one of
  the input file names.
  We will refer to these (n-1) working threads as "ordering" threads.

- After running all ordering threads, the main application awaits for
  the termination of all of them.

- When the main thread waits, each ordering thread:
  - opens "its own" input file
  - reads the first integer value
  - allocates a dynamic array of integers to store all other integers
    numbers stored in the file
  - read those numbers into the array
  - orders the array (in ascending order) using whatever ordering
    algorithm it is deemed appropriate
  - ends (returning the control to the main application thread).

- The main application thread, once collected the termination of all
  ordering threads, merges all ordered arrays into a unique array,
  i.e., a unique sequence of integers.

- It stores the final ordered array in the output file using the
  same (binary) format as the input files.

For the previous input files, the output file (again, in its ASCII
version) should be:
20 0 1 3 5 9 9 12 15 23 23 24 29 34 45 54 65 67 78 89 90


Version A: The main thread waits for the termination of all sorting
threads *before* merging their results.
Version B: The main thread starts merging ordered
sequences as soon as possible, i.e., every time one ordering thread
has done its job.

Observation
-----------

Is Version B faster than Version A?
How much faster is it?
To discover that, generate some large files (millions of values) and
run the program computing the elapsed times used by the process.
Use the library "time.h" and the system call "clock" to evaluate the time
(for more details, please search the WEB).


Exercise 05 (A and B)
OPTIONAL: Multiple matrix multiplications
-----------------------------------------

Implement a *sequential* program in C that:
- Takes a single argument n from the command line
- Generates two arrays (v1 and v2) of size n and a matrix (mat) of
  dimension (n x n), assigning random values to all elements.
  All random values must be in the range [-0.5, 0.5]
- Evaluates the following product
  res = v1^T * mat * v2
  (where v1^T is the transpose of v1).
  The computation must be performed in two steps, as the program must first
  compute
  v = v1^T * mat
  and then evaluate
  res = v * v2
- Prints the result res.

For example, let us suppose that n=5, and v1, v2 and mat are the
following ones:

v1^T = [ -0.0613 -0.1184  0.2655  0.2952 -0.3131 ] 

mat  = [ -0.3424 -0.3581  0.1557  0.2577  0.2060	
          0.4706 -0.0782 -0.4643  0.2431 -0.4682
          0.4572  0.4157  0.3491  0.1078 -0.2231	
         -0.0146  0.2922  0.4340 -0.1555 -0.4029
          0.3003  0.4595  0.1787 -0.3288 -0.4656 ]

v2^T = [ -0.3235  0.1948 -0.1829  0.4502 -0.4656 ]

Then, the result of the computation is:

res = v1^T * mat * v2 = (v1^T * mat) * v2 = -0.004680

After the sequential program correctly computes the final result,
transform it into two *concurrent* programs using Pthreads.

Organize the version A of the concurrent program as follows:

- The main thread creates the arrays, the matrix, and it runs n threads.
  Then, it waits for the termination of all n threads.
- Each thread performs the product of the array v1^T with i-th row
  of mat, which produces the i-th element of vector v.
- When all threads have terminated their task, the main thread compute
  the final result as
  res = v * v2

Organize the version B of the concurrent program as version A, but
once v has been computed, the final result (i.e., res = v * v2) is computed
by one of the created threads (not by the main threads).
Force the program to use the last thread, which terminates the first
part of the task to compute the second part.


